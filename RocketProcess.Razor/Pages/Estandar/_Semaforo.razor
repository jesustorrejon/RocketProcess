@inject IEstadoServices EstadoServices

<style>
    .container.contenedor {
        display: grid;
        place-items: center;
    }

    .semaforo {
        width: max-content;
        height: max-content;
        border-radius: 30px;
        display: flex;
        place-items: center;
        background-color: #2c3e50;
        padding: 10px;
    }

    .luces-circulo {
        display: block;
        width: 25px;
        height: 25px;
        margin-right: 0.5em;
        border-radius: 50%;
        border-right: 4px solid rgb(255, 255,255,0.6);
        background-color: rgb(0, 0,0,0.3);
        position: relative;
    }

    .red {
        background-color: #c0392b;
        box-shadow: 0 0 10px 1px #c0392b;
    }

    .yellow {
        background-color: #f1c40f;
        box-shadow: 0 0 10px 1px #f1c40f;
    }

    .green {
        background-color: #2ecc71;
        box-shadow: 0 0 10px 1px #2ecc71;
    }
</style>

@if (Estados is null || color is null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <div class="container contenedor">
        <div class="semaforo">
            <span class="luces-circulo @red" color="red"></span>
            <span class="luces-circulo @yellow" color="yellow"></span>
            <span class="luces-circulo @green" color="green"></span>
        </div>
    </div>
}


@code {
    [Parameter] public int Id_Estado { get; set; } = 0;
    [Parameter] public string sEstado { get; set; } = "";

    IEnumerable<Estado> Estados;
    string color = "";

    string red => color.ToLower() == "rojo"? "red" : "";
    string yellow => color.ToLower() == "amarillo" ? "yellow" : "";
    string green => color.ToLower() == "verde" ? "green" : "";

    protected override async Task OnInitializedAsync()
    {
        Estados = await EstadoServices.GetAll();
        color = Estados.FirstOrDefault(x => x.Id_Estado == Id_Estado || x.Descripcion == sEstado).Color;
    }

    protected override async Task OnParametersSetAsync()
    {
       
    }
}
