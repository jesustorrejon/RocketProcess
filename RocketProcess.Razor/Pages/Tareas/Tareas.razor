@page "/Tareas"

@inject ITareasServices TareasServices
@inject NavigationManager NM
@attribute [Authorize]

@*<Grilla Virtualize="true" Buscador="true" Items="lista" T="string" CapturarFila="Capturar">
    <Encabezado>
        <th scope="col">ID</th>
    </Encabezado>
    <Fila>
        <tr>@context</tr>
    </Fila>
</Grilla>*@

<h3 class="text-center pb-3">Tareas</h3>
    <MudDataGrid Outlined="true" Hover="true" T="Tarea" Items="@EnumTareas" Virtualize="true" FixedHeader="true" Height="350px"
             Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterRow" Loading="@(EnumTareas is null)">
        <Columns>
        <Column T="Tarea" Field="Id_Tarea" Title="#" />
        <Column T="Tarea" Field="Nombre" />
        <Column Sortable="false" T="Tarea" Field="Fecha_Inicio" />
        <Column Sortable="false" T="Tarea" Field="Fecha_Termino" />
        <Column Sortable="false" T="Tarea" CellClass="d-flex justify-end">
            <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@(e => Modificar(context.Item))" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(e => Eliminar(context.Item))" />
            </CellTemplate>
            </Column>
        </Columns>
    </MudDataGrid>
    <MudCardActions Class="align-items-center pt-2 row flex-row-reverse">
        <MudButton Class="col-lg-2 col-md-2 col-sm-12 col-xs-12 ml-5 mt-2 btn btn-info" OnClick="Agregar" Variant="Variant.Filled" Color="Color.Info" StartIcon="fas fa-user-plus">
            <MudText Class="pl-2">Agregar</MudText>
        </MudButton>
    </MudCardActions>

@code {
    List<string> lista;
    IEnumerable<Tarea> EnumTareas;
    int cantidadRegistros = 50000;

    protected override async Task OnInitializedAsync()
    {
        EnumTareas = await TareasServices.GetAll();
        lista = new List<string>();
        //lista = ObtenerRegistros(0, cantidadRegistros);
    }



    private void GenerarRegistros(){
        lista = ObtenerRegistros(0, cantidadRegistros);
    }

    ValueTask<ItemsProviderResult<String>> CargarRegistros(ItemsProviderRequest request)
    {
        var cantidadASolicitar = Math.Min(request.Count, cantidadRegistros - request.StartIndex);
        var listaRegistros = ObtenerRegistros(request.StartIndex, cantidadASolicitar);
        var resultado = new ItemsProviderResult<String>(listaRegistros, cantidadRegistros);
        return ValueTask.FromResult(resultado);
    }

    public List<string> ObtenerRegistros(int inicial, int cantidad){
        var listado = new List<string>();

        if (lista is null)
        {
            lista = new List<string>();
        }

        for (int i = inicial; i < cantidad + inicial; i++)
        {
            string dato = i + " registro ";
            listado.Add(dato);
        }

        return listado;
    }

    void Capturar(string registro){
        string reg = registro;
    }

    private async Task Modificar(object xTarea)
    {
        NM.NavigateTo($"Tarea/Editar/{(xTarea as Tarea).Id_Tarea}");
        //var p = new DialogParameters();
        //var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true };
        //p.Add("usuario", xUsuario);
        //var dialog = DialogService.Show<FlujoEdit>("", p, options);
        //var result = await dialog.Result;
        //if (!result.Cancelled)
        //{
        //    Enumusuarios = await FlujosServices.GetAll();
        //    StateHasChanged();
        //}

    }

    private async void Eliminar(object xUsuario)
    {
        //var p = new DialogParameters();
        //var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true };
        //p.Add("usuario", xUsuario);
        //var dialog = DialogService.Show<FlujoDelete>("", p, options);
        //var result = await dialog.Result;

        //if (!result.Cancelled)
        //{
        //    await FlujosServices.Delete((xUsuario as ListUser).Id_Usuario);
        //}
    }

    protected async Task Agregar()
    {
        //var p = new DialogParameters();
        //var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true };
        //DialogService.Show<FlujoAdd>("Agregar", p, options);
    }
    
}
